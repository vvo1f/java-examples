/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;


init with {:
    table = new HashMap<String, HashMap<String, Integer>>();
:};

parser code 	{:
    
    public HashMap<String, HashMap<String, Integer>> table;

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};



//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal TOKEN1, TOKEN2, TOKEN3, S, SO, SC, CM, EQ, MS, SEP, PART;
terminal MINMAX, RO, RC, ARROW, PIPE, COL, M;
terminal String QSTRING;
terminal Integer UINT;

non terminal prog, header, token1_l, cars_l, cars, race, print_min_max_l, print_min_max;
non terminal Object[] sections, performances;
non terminal Float drive_stat_l, parts, part;
non terminal HashMap speeds;
non terminal String NT0, NT1;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;
prog ::= header SEP cars_l SEP race
;

//////////////////////////////////
///// HEADER
/////////////////////////////////

header ::= token1_l TOKEN2 S token1_l TOKEN3 S token1_l
        | token1_l TOKEN3 S token1_l TOKEN2 S token1_l
;

token1_l ::= token1_l TOKEN1 S
        | /* epsilon */
;

//////////////////////////////////
///// CARS
/////////////////////////////////

cars_l ::= cars cars
    | cars_l cars cars
;

// TODO: fill in hash table with all cars info
cars ::= QSTRING:s SO speeds:tab SC {: 
                                        RESULT = new HashMap<String, Integer>();
                                        parser.table.put(s, tab);
                                 :}
;

speeds ::= QSTRING:s EQ UINT:u MS {: 
                                    RESULT = new HashMap<String, Integer>();
                                    RESULT.put(s, u);
                                :}
        | speeds:tab CM QSTRING:s EQ UINT:u MS {: 
                                                tab.put(s, u);
                                                RESULT = tab;                           
                                            :}
;

//////////////////////////////////
///// RACE
/////////////////////////////////

// print min and max of speeds
race ::= print_min_max_l performances:s {: 
                                            System.out.println("WINNER: " + s[0] + " " + s[1] + " s");
                                        :}
;

print_min_max_l ::= | print_min_max_l print_min_max;
print_min_max ::= MINMAX RO QSTRING RC RO sections:s RC S {: 
                                                               System.out.println("Min: " + s[0] + " Max: " + s[1]);
                                                                :}
;

sections ::= QSTRING:s {: 
                            String car = (String) parser.stack(-3);
                            HashMap<String, Integer> speeds = parser.table.get(car); // ex: { key1=value1, key2=value2, ...}
                            // fetch speed
                            Integer speed = (Integer) speeds.get(s);
                            RESULT = new Object[2];
                            RESULT[0] = speed; // min
                            RESULT[1] = speed; // max
                        :}
    | sections:m CM QSTRING:s {:
                            String car = (String) parser.stack(-5);
                            HashMap<String, Integer> speeds = parser.table.get(car);
                            Integer speed = (Integer) speeds.get(s);
                            RESULT = new Object[2];

                            // state#1
                            if (speed < ((Integer) m[0])) {
                                RESULT[0] = speed; // update min
                                RESULT[1] = m[1]; // max
                            }
                            // state#2
                            else if (speed > ((Integer) m[1])) {
                                RESULT[0] = m[0];
                                RESULT[1] = speed; // update max
                            }
                            // state#3 (Otherwise)
                            else {
                                RESULT[0] = m[0]; // min remains the same
                                RESULT[1] = m[1]; // max remains the same
                            }
                        :}
;

performances ::= QSTRING:s {: System.out.println(s); :} ARROW parts:x S {: 
                                                                           System.out.println("TOTAL: " + x + " s");
                                                                           // winner car:
                                                                            RESULT = new Object[2];
                                                                            RESULT[0] = s; // car name
                                                                            RESULT[1] = x; // total time                                                                         
                                                                        :}
            | performances:perf QSTRING:s {: System.out.println(s); :} ARROW parts:x S {: 
                                                                            System.out.println("TOTAL: " + x + " s");
                                                                            // winner car:
                                                                            RESULT = new Object[2];
                                                                            // check if the current winner
                                                                            if ((Float) perf[1] < x) {
                                                                                // current winner is an old car
                                                                                RESULT[0] = perf[0]; // car name
                                                                                RESULT[1] = perf[1]; // total time
                                                                            } else {
                                                                                // current winner is this car
                                                                                RESULT[0] = s;
                                                                                RESULT[1] = x;
                                                                            }
                                                                            
                                                                        :}
;

parts ::= NT0 part:x {: RESULT = x; :}
        | parts:res PIPE NT1 part:x {: RESULT = res + x; :} 
;

NT0 ::= {: RESULT = (String) parser.stack(-2); :};
NT1 ::= {: RESULT = (String) parser.stack(-4); :};


part ::=  PART UINT:u COL drive_stat_l:stat {: 
                                            RESULT = stat; // store the drive stat
                                            System.out.println("PART" + u + ": " + stat + "s");
                                         :}
;

drive_stat_l ::= QSTRING:s UINT:u M {:
                                        String car = (String) parser.stack(-6);
                                        HashMap<String, Integer> speeds = parser.table.get(car);
                                        Integer speed = (Integer) speeds.get(s);
                                        float result = (float) u.intValue()/ (float) speed.intValue(); // calculate the drive stat
                                        RESULT = new Float(result); // store the drive stat
                                    :}
            | drive_stat_l:stat CM QSTRING:s UINT:u M {: 
                                                    String car = (String) parser.stack(-8);
                                                    HashMap<String, Integer> speeds = parser.table.get(car);
                                                    Integer speed = (Integer) speeds.get(s);
                                                    float result = (float) u.intValue()/ (float) speed.intValue(); // calculate the drive stat
                                                    RESULT = new Float(result); // store the drive stat
                                                    RESULT += stat; // accumulate the drive stat | OR: RESULT = stat + RESULT;
                                                :}
;